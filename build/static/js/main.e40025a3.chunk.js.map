{"version":3,"sources":["EmailForm.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","server_url","MainForm","handleSubmit","e","preventDefault","_this","props","form","validateFields","err","values","console","log","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","status","alert","_resetForm","resetFields","this","fieldsError","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","recipientNameError","emailError","subjectError","bodyError","react_default","a","createElement","es_form","onSubmit","className","Item","validateStatus","help","rules","required","message","input","placeholder","type","require","autosize","minRows","maxRows","es_button","htmlType","disabled","Object","keys","some","field","Component","EmailForm","Form","create","name","App","src_EmailForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e40025a3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport 'antd/dist/antd.css';\nimport './EmailForm.css';\n\nconst { TextArea } = Input\nconst server_url = 'https://email-klopot-server.herokuapp.com/';\n\nfunction hasErrors(fieldsError) {\n  return Object.keys(fieldsError).some(field => fieldsError[field]);\n}\n\nclass MainForm extends Component {\n\n  componentDidMount() {\n    this.props.form.validateFields();\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (err != null) {\n        console.log('Received values of form: ', err);\n      } else {\n        fetch(server_url + \"send/\", {\n          method: \"POST\",\n          headers: {\n            'Content-Type': \"application/json\"\n          },\n          body: JSON.stringify(values)\n        }).then(res => {\n          if (res.status === 200) {\n            alert('Email was sent successfully.');\n          } else {\n            alert('Email sent was failure.')\n          }\n        })\n        this._resetForm();\n      }\n    })\n  }\n\n  _resetForm = () => {\n    this.props.form.resetFields();\n  }\n\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n    // Only show error after a field is touched.\n    const recipientNameError = isFieldTouched('recipientName') && getFieldError('recipientName');\n    const emailError = isFieldTouched('email') && getFieldError('email');\n    const subjectError = isFieldTouched('emailSubject') && getFieldError('emailSubject');\n    const bodyError = isFieldTouched('emailBody') && getFieldError('emailBody');\n\n    return (\n      <Form onSubmit={this.handleSubmit} className=\"email-form\">\n        <Form.Item\n          validateStatus={recipientNameError ? 'error' : ''}\n          help={recipientNameError || ''}\n        >\n          {getFieldDecorator('recipientName', {\n            rules: [{ required: true, message: 'Please input recipient name!'}]\n          })(\n            <Input placeholder=\"Recipient Name\"/>\n          )}\n        </Form.Item>\n        <Form.Item\n          validateStatus={emailError ? 'error' : ''}\n          help={emailError || ''}\n        >\n          {getFieldDecorator('email', {\n            rules: [{ required: true, type: 'email', message: 'Please input recipient email!'}]\n          })(\n            <Input placeholder=\"Email\"/>\n          )}\n        </Form.Item>\n        <Form.Item\n          validateStatus={subjectError ? 'error' : ''}\n          help={subjectError || ''}\n        >\n          {getFieldDecorator('emailSubject', {\n            rules: [{ require: true, message: 'Please input email subject!'}]\n          })(\n            <Input placeholder=\"Subject\"/>\n          )}\n        </Form.Item>\n        <Form.Item\n          validateStatus={bodyError ? 'error' : ''}\n          help={bodyError || ''}\n        >\n          {getFieldDecorator('emailBody', {\n            rules: [{ required: true, message: 'Please input the email body!'}]\n          })(\n            <TextArea placeholder=\"Type your messages...\" autosize={{minRows: 6, maxRows: 10}}/>\n          )}\n        </Form.Item>\n        <Form.Item>\n          <Button className=\"button\" type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>Send</Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n}\nconst EmailForm = Form.create({ name: 'email_form' })(MainForm);\nexport default EmailForm","import React, { Component } from 'react';\nimport './App.css';\nimport EmailForm from './EmailForm'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>Email Demo</p>\n          <EmailForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}